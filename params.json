{
  "name": "Obdi-rsyncbackup",
  "tagline": "Obdi plugin to do rsync backups with compression, deduplication and snapshotting using zfs.",
  "body": "# obdi-rsyncbackup\r\n\r\nBack up servers using rsync. Achieves compression and deduplication when using zfs.\r\n\r\n# Todo\r\n\r\n* ~~PRE/POST start/stop/pause/unpause workflow for consistent backups.~~\r\n* ~~Scheduling (use cron and rest api for now).~~\r\n* ~~Delete snapshots~~ done\r\n* ~~Viewing and files and snapshots.~~ done\r\n\r\n## Screenshot\r\n\r\n![](images/obdi-rsyncbackup-small.png?raw=true)\r\n\r\n## What is it?\r\n\r\nA simple backup solution for Linux servers that achieves deduplication\r\nand compression using the zfs file system.\r\n\r\n## Installation\r\n\r\nInstallation is in three parts, installing the plugin, setting up the server\r\nthat will be used for storing the backups, and set up the servers that you\r\nwant to back up.\r\n\r\n#### Installing the plugin\r\n\r\n* Log into the admin interface, 'https://ObdiHost/manager/admin'.\r\n* In Plugins -> Manage Repositories add, 'https://github.com/mclarkson/obdi-nettools-repository.git'\r\n* In Plugins -> Add Plugin, choose 'rsyncbackup' and Install.\r\n\r\n#### Server Set-up\r\n\r\nInstructions for a CentOS 6 server. Centos 7 should be the same.\r\n\r\nSet up zfs:\r\n\r\n```\r\n# CentOS 6\r\n\r\nyum install zfs\r\n\r\n# Create a 1TB zfs pool on a logical volume\r\n\r\nmkdir /backup\r\nmodprobe zfs\r\nlvcreate -L1t -n servers-zfs vg1\r\nzpool create backup /dev/vg1/servers-zfs\r\n\r\n# Note: dedup needs a large amount of memory.\r\nzfs create -o dedup=on -o compression=gzip backup/servers-zfs\r\n\r\n# Disable atime\r\n\r\nzfs set atime=off backup/servers-zfs\r\n\r\n# List and check settings\r\n\r\nzfs list\r\nzpool list\r\nzfs get dedup\r\nzfs get compression\r\nzfs get atime\r\n```\r\n\r\nInstall the obdi worker:\r\n\r\n```\r\n# Enable EPEL YUM repository\r\nrpm -ivh https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm\r\n\r\n# Enable Obdi COPR YUM repository\r\ncurl -o /etc/yum.repos.d/obdi.repo \\\r\n  https://copr.fedorainfracloud.org/coprs/mclarkson/Obdi/repo/epel-6/mclarkson-Obdi-epel-6.repo\r\n\r\n# Install Obdi Worker\r\nyum -y install obdi-worker\r\n```\r\n\r\nIn the admin interface -> Environments, edit the environment, switch to the Capabilities\r\ntab, add the RSYNCBACKUP_WORKER_1 capability and click Apply, then add the URL of the new\r\nObdi worker to the RSYNCBACKUP_WORKER_1 capability.\r\n\r\nObdi can now use this server as a backup server.\r\n\r\n#### Setting up the Servers to be Backed Up From\r\n\r\nOn every server enable rsyncd by ensuring xinetd has disable set to no for `/etc/xinetd.d/rsync'.\r\nFor example:\r\n\r\n```\r\nservice rsync\r\n{\r\n        disable = no\r\n        flags           = IPv6\r\n        socket_type     = stream\r\n        wait            = no\r\n        user            = root\r\n        server          = /usr/bin/rsync\r\n        server_args     = --daemon\r\n        log_on_failure  += USERID\r\n}\r\n```\r\n\r\nSupply an rsyncd configuration. For example, use the following configuration\r\nin `/etc/rsyncd.conf' to do be able to do a full system backup:\r\n\r\n```\r\n[backup]\r\n    path = /\r\n    comment = Full system backup\r\n    read only = true\r\n    uid = 0\r\n    gid = 0\r\n    exclude = dev/** proc/** media/** mnt/** selinux/** sys/** tmp/**\r\n```\r\n\r\nWith the above set-up the following settings will work:\r\n\r\n* PROTOCOL = rsyncd\r\n* PRE = 'create_zfs_snapshot'.\r\n* RSYNC_OPTS = your options, e.g. \"--sparse\", \"-z\".\r\n* BASEDIR = '/backup/servers-zfs/'.\r\n* KNOWNHOSTS = empty.\r\n* NUMPERIODS = 1 or more.\r\n* TIMEOUT = 0 (disabled) or more seconds.\r\n* Verbose = on or off. Will make the database grow if set to 'on'.\r\n\r\nLock down access using hosts.allow, hosts.deny and/or iptables.\r\n\r\n## Example cron jobs\r\n\r\n### Full system backup\r\n\r\nThis example cron job will start a backup at 06.15 every day:\r\n\r\n```\r\n15 06 * * * /home/a_user/cron/dobackup.sh\r\n```\r\n\r\nThe preceeding cron job will run the dobackup.sh script:\r\n\r\n```\r\n#!/bin/bash\r\n\r\nENVID=1\r\nTASKID=1\r\n\r\n# Log in\r\n\r\nipport=\"127.0.0.1:443\"\r\n\r\nguid=`curl -ks -d '{\"Login\":\"nomen.nescio\",\"Password\":\"password\"}' \\\r\n  https://$ipport/api/login | grep -o \"[a-z0-9][^\\\"]*\"`\r\n\r\n# Back-up\r\n\r\ncurl -k -X POST \\\r\n  \"https://$ipport/api/nomen.nescio/$guid/rsyncbackup/backup?env_id=$ENVID&task_id=$TASKID\"\r\n```\r\n\r\nEnsure dobackup.sh is executable with 'chmod +x dobackup.sh'.\r\n\r\n### Delete snapshots more than 30 days old\r\n\r\nThis example cron job will delete old snapshots at 03.00 every day:\r\n\r\n```\r\n00 03 * * * /home/a_user/cron/prunesnapshots.sh\r\n```\r\n\r\nThe preceeding cron job will run the prunesnapshots.sh script:\r\n\r\n```\r\n# Log in\r\n\r\nipport=\"127.0.0.1:443\"\r\n\r\nguid=`curl -ks -d '{\"Login\":\"nomen.nescio\",\"Password\":\"password\"}' \\\r\n  https://$ipport/api/login | grep -o \"[a-z0-9][^\\\"]*\"`\r\n\r\n# Get list\r\n\r\njob=$(curl -sk \\\r\n    \"https://$ipport/api/nomen.nescio/$guid/rsyncbackup/zfslist?env_id=1&task_id=1\" | \\\r\n    sed 's/.*\"JobId\":\\([0-9]\\+\\).*/\\1/' )\r\n\r\n# Wait for job to finish\r\n\r\nwhile true; do\r\n    r=$(curl -sk \"https://$ipport/api/nomen.nescio/$guid/jobs?job_id=$job\")\r\n    if echo \"$r\" | grep -qs '\"Status\": 5'; then\r\n        break\r\n    else\r\n        echo \"running\"\r\n    fi\r\ndone\r\n\r\n# Get list\r\n\r\nsnaps=$(curl -sk \"https://$ipport/api/nomen.nescio/$guid/outputlines?job_id=$job\" |\r\n    grep \"Text\" |\r\n    tr -d '\\\\' |\r\n    grep -o '\\[.*\\]' |\r\n    python -mjson.tool |\r\n    grep -Eo \"[0-9]{8,8}\\.[0-9]\")\r\n\r\namonthago=$(date -d \"30 days ago\" +%Y%m%d)\r\n\r\nfor i in $snaps; do [[ ${i%.[0-9]} < $amonthago ]] && delete=\"$delete $i\"; done\r\n\r\n# Delete snaps more than 30 days old\r\n\r\nfor SNAP in $delete ; do\r\n    curl -k -X POST \\\r\n        \"https://$ipport/api/nomen.nescio/$guid/rsyncbackup/deletesnapshot?env_id=1&task_id=1&snapshot=$SNAP\"\r\ndone\r\n\r\nexit 0\r\n```\r\n\r\nEnsure prunesnapshots.sh is executable with 'chmod +x prunesnapshots.sh'.\r\n\r\n## Dev\r\n\r\nrsyncbackup.db schema:\r\n\r\n![](doc/DB_Schema.png?raw=true)\r\n\r\n**Backup tasks:**\r\n\r\n```\r\n# Log in\r\n\r\n$ ipport=\"127.0.0.1:443\"\r\n\r\n$ guid=`curl -ks -d '{\"Login\":\"nomen.nescio\",\"Password\":\"password\"}' \\\r\n  https://$ipport/api/login | grep -o \"[a-z0-9][^\\\"]*\"`\r\n\r\n# Create\r\n\r\n$ curl -k -d '{\"TaskDesc\":\"Backup task #1\",\"CapTag\":\"RSYNCBACKUP_WORKER_1\"}' \\\r\n  https://$ipport/api/nomen.nescio/$guid/rsyncbackup/tasks?env_id=1\r\n\r\n# Read\r\n\r\n$ curl -k https://$ipport/api/nomen.nescio/$guid/rsyncbackup/tasks?env_id=1\r\n\r\n# Update\r\n\r\n$ curl -k -d '{\"Id\":1,\"Text\":\"Hello there\"}' -X PUT \\\r\n  https://$ipport/api/nomen.nescio/$guid/rsyncbackup/tasks?env_id=1\r\n\r\n# Delete\r\n\r\n$ curl -k -X DELETE \\\r\n  https://$ipport/api/nomen.nescio/$guid/rsyncbackup/tasks/1?env_id=1\r\n```\r\n\r\n**Includes:**\r\n\r\n```\r\n# Log in\r\n\r\n$ ipport=\"127.0.0.1:443\"\r\n\r\n$ guid=`curl -ks -d '{\"Login\":\"nomen.nescio\",\"Password\":\"password\"}' \\\r\n  https://$ipport/api/login | grep -o \"[a-z0-9][^\\\"]*\"`\r\n\r\n# Create\r\n\r\n$ curl -k -d '{\"Host\":\"host1.local\",\"Base\":\"backup\"}' \\\r\n  \"https://$ipport/api/nomen.nescio/$guid/rsyncbackup/includes?env_id=1&task_id=1\"\r\n\r\n# Read\r\n\r\n$ curl -k \"https://$ipport/api/nomen.nescio/$guid/rsyncbackup/includes?env_id=1&task_id=1\"\r\n\r\n# Update\r\n\r\n$ curl -k -d '{\"Id\":1,\"Host\":\"host2.local\"}' -X PUT \\\r\n  \"https://$ipport/api/nomen.nescio/$guid/rsyncbackup/includes?env_id=1&task_id=1\"\r\n\r\n# Delete\r\n\r\n$ curl -k -X DELETE \\\r\n  \"https://$ipport/api/nomen.nescio/$guid/rsyncbackup/includes/1?env_id=1\"\r\n```\r\n\r\n**Excludes:**\r\n\r\n```\r\n# Log in\r\n\r\n$ ipport=\"127.0.0.1:443\"\r\n\r\n$ guid=`curl -ks -d '{\"Login\":\"nomen.nescio\",\"Password\":\"password\"}' \\\r\n  https://$ipport/api/login | grep -o \"[a-z0-9][^\\\"]*\"`\r\n\r\n# Create\r\n\r\n$ curl -k -d '{\"Path\":\"/var/log/**\"}' \\\r\n  \"https://$ipport/api/nomen.nescio/$guid/rsyncbackup/excludes?env_id=1&include_id=1\"\r\n\r\n# Read\r\n\r\n$ curl -k \"https://$ipport/api/nomen.nescio/$guid/rsyncbackup/excludes?env_id=1&include_id=1\"\r\n\r\n# Update\r\n\r\n$ curl -k -d '{\"Id\":1,\"Host\":\"host2.local\"}' -X PUT \\\r\n  \"https://$ipport/api/nomen.nescio/$guid/rsyncbackup/excludes?env_id=1&include_id=1\"\r\n\r\n# Delete\r\n\r\n$ curl -k -X DELETE \\\r\n  \"https://$ipport/api/nomen.nescio/$guid/rsyncbackup/excludes/1?env_id=1\"\r\n```\r\n\r\n**Settings:**\r\n\r\n```\r\n# Log in\r\n\r\n$ ipport=\"127.0.0.1:443\"\r\n\r\n$ guid=`curl -ks -d '{\"Login\":\"nomen.nescio\",\"Password\":\"password\"}' \\\r\n  https://$ipport/api/login | grep -o \"[a-z0-9][^\\\"]*\"`\r\n\r\n# Create\r\n\r\n$ curl -k -d '{\r\n    \"Id\":0,\r\n    \"Protocol\":\"rsyncd\",\r\n    \"Pre\":\"create_zfs_snapshot\",\r\n    \"RsyncOpts\":\"--sparse\",\r\n    \"BaseDir\":\"/backup/servers-zfs/\",\r\n    \"KnownHosts\":\"\",\r\n    \"NumPeriods\":1,\r\n    \"Timeout\":0,\r\n    \"Verbose\":true\r\n  }' \\\r\n  \"https://$ipport/api/nomen.nescio/$guid/rsyncbackup/settings?env_id=1&task_id=1\"\r\n\r\n# Read\r\n\r\n$ curl -k \"https://$ipport/api/nomen.nescio/$guid/rsyncbackup/settings?env_id=1&task_id=1\"\r\n\r\n# Update\r\n\r\n$ curl -k -d '{\"Id\":1,\"RsyncOpts\":\"--sparse -z\"}' -X PUT \\\r\n  \"https://$ipport/api/nomen.nescio/$guid/rsyncbackup/settings?env_id=1&task_id=1\"\r\n\r\n# Delete\r\n\r\n$ curl -k -X DELETE \\\r\n  \"https://$ipport/api/nomen.nescio/$guid/rsyncbackup/settings/1?env_id=1&task_id=1\"\r\n```\r\n\r\n**Initiate a backup:**\r\n\r\n```\r\n# Log in\r\n\r\n$ ipport=\"127.0.0.1:443\"\r\n\r\n$ guid=`curl -ks -d '{\"Login\":\"nomen.nescio\",\"Password\":\"password\"}' \\\r\n  https://$ipport/api/login | grep -o \"[a-z0-9][^\\\"]*\"`\r\n\r\n# Back-up\r\n\r\n$ curl -k -X POST \\\r\n  \"https://$ipport/api/nomen.nescio/$guid/rsyncbackup/backup?env_id=1&task_id=1\"\r\n\r\n# Verbose back-up (verbose paramater can be set to any value)\r\n\r\n$ curl -k -X POST \\\r\n  \"https://$ipport/api/nomen.nescio/$guid/rsyncbackup/backup?env_id=1&task_id=1&verbose=t\"\r\n\r\n```\r\n\r\n**List zfs snapshots and files contents:**\r\n\r\n```\r\n$ curl -k \"https://$ipport/api/nomen.nescio/$guid/rsyncbackup/zfslist?env_id=1&task_id=1\"\r\n```\r\n\r\n**List directory contents:**\r\n\r\n```\r\n$ curl -k \"https://$ipport/api/nomen.nescio/$guid/rsyncbackup/ls?env_id=1&task_id=1&path=nosnap/server001\"\r\n```\r\n\r\n**Delete snapshot:**\r\n\r\n```\r\n$ curl -k -X POST \\\r\n  \"https://$ipport/api/nomen.nescio/$guid/rsyncbackup/deletesnapshot?env_id=1&task_id=1&snapshot=20160804.1\"\r\n```\r\n\r\n**Calculate unpacked, undeduped directory size:**\r\n\r\n```\r\n$ curl -k \"https://$ipport/api/nomen.nescio/$guid/rsyncbackup/dirsize?env_id=1&task_id=1&path=nosnap/server001\"\r\n```\r\n\r\n**Copy backup directory to another server:**\r\n\r\n```\r\nRequired URL parameters:\r\n\r\n    env_id    - Environment id.\r\n    task_id   - Backup task id.\r\n    path      - Backup path to copy from relative to BASEDIR.\r\n\r\nOptional URL parameters:\r\n    mountdev  - Device to mount, e.g /dev/sdb.\r\n    mountdir  - Directory to mount /dev/sdb on.\r\n    umountdir - \"true\" - will unmount at the end, otherwise it's left mounted.\r\n```\r\n\r\nExample:\r\n\r\n```\r\n$ curl -ks -X POST \"https://$ipport/api/nomen.nescio/$guid/rsyncbackup/remotecopy?env_id=1&task_id=1&path=/nosnap/linuxserver001&mountdev=/dev/sdb&mountdir=/incoming/linuxserver001\"\r\n```\r\n\r\nSee [obdi-nettools-repository](https://github.com/mclarkson/obdi-nettools-repository)\r\nfor more information about Net plugins.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}